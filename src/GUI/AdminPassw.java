package GUI;

import Code.Global;
import Code.Security;
import static java.awt.event.KeyEvent.VK_ENTER;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Reece
 */
public class AdminPassw extends javax.swing.JFrame {

    Security sec = new Security();
    Global message = new Global();
    String mode;

    /**
     * Creates new form AdminPassw
     *
     * @param input
     */
    public AdminPassw(String input) {
        this.mode = input;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pswAdmin = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtWaiting = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrative Login");
        setResizable(false);

        jLabel1.setText("Admin Password:");

        pswAdmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pswAdminKeyPressed(evt);
            }
        });

        btnLogin.setText("Login");
        btnLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        txtWaiting.setFont(new java.awt.Font("Tw Cen MT", 2, 12)); // NOI18N
        txtWaiting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Loading-gif.gif"))); // NOI18N
        txtWaiting.setText("Waiting for Authentication...");
        txtWaiting.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        txtWaiting.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Error.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pswAdmin))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 85, Short.MAX_VALUE)
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack))
                    .addComponent(txtWaiting, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pswAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnLogin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtWaiting)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if (!pswAdmin.getPassword().equals("")) {
            login();
        } else {
            txtWaiting.setEnabled(false);
            pswAdmin.setText("");
            message.displayMessage(7, "Error");
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void login() {
        switch (mode) {
            case "login":
                String passText = new String(pswAdmin.getPassword());
                try {
                    String password = sec.getAdminPassword();
                    if (passText.equals(password)) {
                        sec.saveLog("master logged on.");
                        new MasterUI().setVisible(true);
                        this.dispose();
                    } else {
                        txtWaiting.setEnabled(false);
                        pswAdmin.setText("");
                        message.displayMessage(7, "Error");
                    }
                } catch (Exception e) {
                    txtWaiting.setEnabled(false);
                    JOptionPane.showMessageDialog(this, e, "Error", JOptionPane.WARNING_MESSAGE);
                }
                return;
            case "auth":
                auth();
                return;
            default:
                JOptionPane.showMessageDialog(this, "Invalid request!", "Auth Error", JOptionPane.ERROR_MESSAGE);
                this.dispose();
        }
    }

    private void auth() {
        Global.admin = false;
        String passText = new String(pswAdmin.getPassword());
        this.setTitle("This process requires elevation...");
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_STATE_CHANGED));
        try {
            String password = sec.getAdminPassword();
            if (passText.equals(password)) {
                Global.admin = true;
                JOptionPane.showMessageDialog(this, "You have now been authorised", "Authorisation Successful", JOptionPane.PLAIN_MESSAGE);
                this.dispose();
            } else {
                Global.admin = false;
                txtWaiting.setEnabled(false);
                message.displayMessage(7, "Error");
            }
        } catch (Exception e) {
            Global.admin = false;
            txtWaiting.setEnabled(false);
            message.displayMessage(0, "Error");
        }
    }

    private void back() {
        if (mode.equals("login")) {
            new LoginUI().setVisible(true);
            this.dispose();
        } else {
            this.dispose();
        }
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        back();
    }//GEN-LAST:event_btnBackActionPerformed

    private void pswAdminKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pswAdminKeyPressed
        if (evt.getKeyCode() == VK_ENTER) {
            login();
        } else if (evt.getKeyCode() == 27) {
            back();
        }
    }//GEN-LAST:event_pswAdminKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField pswAdmin;
    private javax.swing.JLabel txtWaiting;
    // End of variables declaration//GEN-END:variables
}
