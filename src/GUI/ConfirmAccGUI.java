package GUI;

import Code.Security;
import Code.Global;
import static java.awt.event.KeyEvent.VK_ENTER;
import java.io.File;
import javax.swing.JOptionPane;

/**
 *
 * @author reece
 */
public class ConfirmAccGUI extends javax.swing.JFrame {

    Security sec = new Security();
    Global message = new Global();

    private final int mode;

    private final int input;

    /**
     * Creates new form ConfirmAccGUI
     *
     * @param mode
     * @param input
     */
    public ConfirmAccGUI(int mode, int input) {
        initComponents();
        this.mode = mode;
        this.input = input;
        if (mode == 4) {
            txtReason.setEnabled(false);
            txtReason.setText("Not Applicable");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        btnConfirm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtReason = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account Name");
        setResizable(false);

        jLabel1.setText("Account Name:");

        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel2.setText("Reason: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(txtReason))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtReason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        confirm(mode, input);
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        if (evt.getKeyCode() == VK_ENTER) {
            confirm(mode, input);
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void confirm(int mode, int input) {
        String loadBal = "0.0";
        File load = new File("C:\\RTC\\data\\" + txtUsername.getText() + "-balance.dat");
        if (!load.exists()) {
            JOptionPane.showMessageDialog(this, "Account doesn't exist.");
            txtUsername.setText("");
            return;
        } else {
            try {
                loadBal = sec.decAll("C:\\RTC\\data\\", txtUsername.getText() + "-balance.dat", false);
            } catch (Exception ex) {
                message.displayMessage(1, "Error");
                System.out.println(ex);
            }
            double intBalance = 0.0;
            if (loadBal != null) {
                try {
                    intBalance = Double.parseDouble(loadBal);
                } catch (NumberFormatException e) {
                    intBalance = 0.0;
                }
            }
            String record = "";
            boolean write = false;
            switch (mode) {
                case 1:
                    write = true;
                    record = String.valueOf(intBalance + input);
                    break;
                case 2:
                    write = true;
                    record = String.valueOf(intBalance - input);
                    break;
                case 3:
                    write = true;
                    record = String.valueOf(input + ".0");
                    break;
                case 4:
                    write = false;
                    break;
                default:
                    break;
            }
            if (write) {
                try {
                    sec.encryptFile("c:\\RTC\\data\\" + txtUsername.getText(), "-balance.dat", record);
                    if (!txtReason.getText().equals("")) {
                        sec.saveLog("master updated " + txtUsername.getText() + "'s account credit by £" + input + " for " + txtReason.getText() + ".");
                    } else {
                        sec.saveLog("master updated " + txtUsername.getText() + "'s account credit by £" + input);
                    }
                    confirm(4, 0);
                } catch (Exception ignore) {
                    message.displayMessage(5, "Error");
                    System.out.println(ignore);
                }
            } else if (!write && mode == 4 && load.exists()) {
                new AdminUserBalance(txtUsername.getText(), intBalance).setVisible(true);
            }
        }
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtReason;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
